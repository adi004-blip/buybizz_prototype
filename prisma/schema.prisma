// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum AgentStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id          String   @id // Clerk user ID
  email       String   @unique
  role        UserRole @default(CUSTOMER)
  fullName    String   @map("full_name")
  companyName String?  @map("company_name")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  agents     Agent[]
  orders     Order[]
  userAgents UserAgent[]
  sessions   Session[]
  cartItems  CartItem[]

  @@map("users")
}

model Agent {
  id               String      @id @default(uuid())
  vendorId         String      @map("vendor_id")
  name             String
  description      String      @db.Text
  shortDescription String?     @map("short_description")
  price            Decimal     @db.Decimal(10, 2)
  originalPrice    Decimal?    @map("original_price") @db.Decimal(10, 2)
  status           AgentStatus @default(ACTIVE)
  imageUrl         String?     @map("image_url")
  demoUrl          String?     @map("demo_url")
  documentationUrl String?     @map("documentation_url")
  category         String?
  tags             String?
  features         String[]    @default([]) // Array of feature strings
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  // Relations
  vendor     User        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  userAgents UserAgent[]
  cartItems  CartItem[]

  @@index([vendorId])
  @@index([status])
  @@map("agents")
}

model Order {
  id                    String      @id @default(uuid())
  userId                String      @map("user_id")
  amount                Decimal     @db.Decimal(10, 2)
  status                OrderStatus @default(PENDING)
  stripePaymentId       String?     @map("stripe_payment_id")
  stripePaymentIntentId String?     @map("stripe_payment_intent_id")
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  userAgents UserAgent[]

  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String   @map("order_id")
  agentId   String   @map("agent_id")
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([agentId])
  @@map("order_items")
}

model UserAgent {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  agentId     String   @map("agent_id")
  orderId     String   @map("order_id")
  apiKey      String   @unique @map("api_key")
  purchasedAt DateTime @default(now()) @map("purchased_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Note: Removed @@unique([userId, agentId]) to allow multiple purchases of same agent
  // Users can have multiple API keys for the same agent (e.g., quantity > 1)
  @@index([userId])
  @@index([userId, agentId])
  @@map("user_agents")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionToken])
  @@map("sessions")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  agentId   String   @map("agent_id")
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([userId, agentId])
  @@index([userId])
  @@index([agentId])
  @@map("cart_items")
}
